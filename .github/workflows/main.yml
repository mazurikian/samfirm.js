name: Build and Release

on:
  workflow_dispatch: # Evento para ejecución manual

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Clona el código fuente
      - name: Check out code
        uses: actions/checkout@v4.2.2

      # Configura Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "latest"
          check-latest: true

      # Instala dependencias
      - name: Install updated dependencies
        run: npm install
             mpm --trace-warnings
      # Compila el proyecto (si es necesario)
      - name: Compile TypeScript
        run: node downloadFirmware.js -m SM-A236M -r ARO -i 358263681238947

      # Crea un Release en GitHub
      - name: Create Release on GitHub
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="$(date +'%d.%m.%Y')"  # Genera la versión en formato DIA.MES.AÑO
          RESPONSE=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"tag_name\": \"$VERSION\", \"name\": \"$VERSION\", \"body\": \"Release description\", \"draft\": false, \"prerelease\": false}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases)

          # Extrae el ID del release y lo guarda en el entorno
          RELEASE_ID=$(echo $RESPONSE | jq -r .id)
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      # Subir index.js al release
      - name: Upload index.js to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ env.RELEASE_ID }}
        run: |
          FILE_PATH="./dist/index.js"

          # Sube el archivo crudo al release
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @$FILE_PATH \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=index.js"
